"""
1.	Создать список и заполнить его элементами различных типов данных.
Реализовать скрипт проверки типа данных каждого элемента.
Использовать функцию type() для проверки типа.
Элементы списка можно не запрашивать у пользователя, а указать явно, в программе.
"""

# my_list = [17, 'abc', 4.5, None, [1, 'abc', 3], (1, 'abc', 3), {1, 'abc', 3}, {1: 500, 2: 400}]
# for el in my_list:
#     print(type(el))


"""
2.	Для списка реализовать обмен значений соседних элементов.
Значениями обмениваются элементы с индексами 0 и 1, 2 и 3 и т. д.
При нечётном количестве элементов последний сохранить на своём месте.
Для заполнения списка элементов нужно использовать функцию input().
"""

# my_list = input('Введите несколько значений через пробел: ')
# my_list = my_list.split(" ")
# for index in range(0, len(my_list)-1, 2):
#     my_list[index], my_list[index+1] = my_list[index+1], my_list[index]
# print(my_list)


"""
3.	Пользователь вводит месяц в виде целого числа от 1 до 12.
Сообщить, к какому времени года относится месяц (зима, весна, лето, осень).
Напишите решения через list и dict.
"""
# x = int(input('Введите число месяца: '))
#
# winter = [12, 1, 2]
# spring = [3, 4, 5]
# summer = [6, 7, 8]
# autumn = [9, 10, 11]
#
# if x in winter:
#     print('Это зима')
# elif x in spring:
#     print('Это весна')
# elif x in summer:
#     print('Это лето')
# elif x in autumn:
#     print('Это осень')
# else:
#     print('Проверьте корректность ввода значения')


# seasons_dict = {12: 'Зима', 1: 'Зима', 2: 'Зима'}
# seasons_dict.update({3: 'Весна', 4: 'Весна', 5: 'Весна'})
# seasons_dict.update({6: 'Лето', 7: 'Лето', 8: 'Лето'})
# seasons_dict.update({9: 'Осень', 10: 'Осень', 11: 'Осень'})
# print(seasons_dict)


# for season_month, season in seasons_dict.items():
#     if x == season_month:
#         print(season)
#         break
# else:
#     print('Проверьте корректность ввода значения')

# print(seasons_dict.get(x, 'Проверьте корректность ввода значения'))


"""
4.	Пользователь вводит строку из нескольких слов, разделённых пробелами.
Вывести каждое слово с новой строки. Строки нужно пронумеровать.
Если слово длинное, выводить только первые 10 букв в слове.
"""

# sentence = input("Введите предложение: ")
# words = sentence.split(' ')
#
# for word in words:
#     word_index = words.index(word)
#     print(word_index+1, word[:10])


"""
5. Реализовать структуру «Рейтинг», представляющую собой набор натуральных чисел, который не возрастает.
У пользователя нужно запрашивать новый элемент рейтинга.
Если в рейтинге существуют элементы с одинаковыми значениями,
то новый элемент с тем же значением должен разместиться после них.
Подсказка. Например, набор натуральных чисел: 7, 5, 3, 3, 2.
Пользователь ввёл число 3. Результат: 7, 5, 3, 3, 3, 2.
Пользователь ввёл число 8. Результат: 8, 7, 5, 3, 3, 2.
Пользователь ввёл число 1. Результат: 7, 5, 3, 3, 2, 1.
Набор натуральных чисел можно задать сразу в коде, например, my_list = [7, 5, 3, 3, 2].
"""

# my_list = [7, 5, 3, 3, 2]
# my_list_copy = my_list.copy()
#
# x = int(input('Введите целое число: '))
# if x > my_list[0]:
#     my_list_copy.insert(0, x)
# elif x < my_list[-1]:
#     my_list_copy.append(x)
# else:
#     for i in my_list:
#         if x == i:
#             i_index = my_list.index(i)
#             i_count = my_list.count(i)
#             i_index_new = i_index + i_count
#             my_list_copy.insert(i_index_new, x)
#             break
#         elif x > i:
#             my_list_copy.insert(my_list.index(i), x)
#             break
#         else:
#             continue
# print(my_list_copy)
#
